 Python module is simply a Python source file, which can expose classes, functions and global variables.
When imported from another Python source file, the file name is treated as a namespace.
A Python package is simply a directory of Python module(s).
For example, imagine the following directory tree in /usr/lib/python/site-packages:
mypackage/__init__.py <-- this is what tells Python to treat this directory as a package
mypackage/mymodule.py
So then you would do:
import mypackage.mymodule
or
from mypackage.mymodule import myclass

String is a sequence of letters , numbers, characters surrounded by single , double quotes

my_string = “this is my first string”
my_string can be worked in similar to lists

my_string[0],my_string[2]….etc

Slicing my_string[:10] #starting from start and end unto but not including character at 10th index
my_string[::-1] #string reverse


Dictionaries

Unordered list of key value pairs
dict = {}
dict = {‘abc’:’123’,’bcd’:’345’}
del dict{‘abc’}
“abc” in dict #will result true
“abd” not in dict #will result true
dict.keys() #Prints all the keys in the same order
dict.values() #Prints values in the same order
dict.items() #Prints list of tuples of key, value pairs in the same order


Object oriented programming is based on classes , methods and objects.

Class is a datatype contains its own variables, attributes and function which in OOPS is termed as methods

Or BLUE PRINT FOR CREATING OBJECTS

Object as an instance of a defined class and the attributes values for a particular object defines the objects state

class My_router(object):
	‘’’ description’’’ #classes functionality is described
     def __init__(self,router_name,model,ios):  #first function that gets executed when object is defined, init is initialization of variables. Self is current instance of the class
     	self.routername=routername
         self.model=model
         self.ios=ios
     def print_router(self,manu_date):
		print “the router name and date”, self.routername + self.manu_date
         


