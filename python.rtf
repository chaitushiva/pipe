{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 ArialMT;\f1\fnil\fcharset0 Menlo-Regular;\f2\fswiss\fcharset0 Helvetica;
\f3\fnil\fcharset0 LucidaGrande;\f4\fmodern\fcharset0 CourierNewPSMT;\f5\fmodern\fcharset0 CourierNewPS-BoldMT;
}
{\colortbl;\red255\green255\blue255;\red27\green29\blue31;\red255\green255\blue255;\red235\green236\blue237;
\red36\green38\blue41;\red13\green0\blue129;\red37\green127\blue159;\red43\green39\blue19;\red0\green0\blue0;
\red15\green114\blue1;\red251\green0\blue129;\red0\green0\blue255;\red10\green82\blue135;\red18\green139\blue2;
}
{\*\expandedcolortbl;;\cssrgb\c14118\c15294\c16078;\cssrgb\c100000\c100000\c100000;\cssrgb\c93725\c94118\c94510;
\cssrgb\c18824\c20000\c21176;\cssrgb\c6275\c6275\c58039;\cssrgb\c16863\c56863\c68627;\cssrgb\c22353\c20000\c9412;\cssrgb\c0\c0\c0;
\cssrgb\c0\c50980\c0;\cssrgb\c100000\c7843\c57647;\cssrgb\c0\c0\c100000;\cssrgb\c0\c40000\c60000;\cssrgb\c0\c60000\c0;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid1\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww28600\viewh15860\viewkind0
\deftab720
\pard\pardeftab720\sl340\sa300\partightenfactor0

\f0\fs30 \cf2 \cb3 \expnd0\expndtw0\kerning0
A Python module is simply a Python source file, which can expose classes, functions and global variables.\
When imported from another Python source file, the file name is treated as a namespace.\
A Python package is simply a directory of Python module(s).\
For example, imagine the following directory tree in\'a0
\f1\fs26 \cb4 /usr/lib/python/site-packages
\f0\fs30 \cb3 :\
\pard\pardeftab720\sl300\partightenfactor0

\f1\fs26 \cf5 \cb4 mypackage/__init__.py <-- this \cf6 is\cf5  what tells \cf7 Python\cf5  to treat this directory \cf6 as\cf5  a package\
mypackage/mymodule.py\cf8 \
\pard\pardeftab720\sl340\sa300\partightenfactor0

\f0\fs30 \cf2 \cb3 So then you would do:\
\pard\pardeftab720\sl300\partightenfactor0

\f1\fs26 \cf6 \cb4 import\cf5  mypackage.mymodule\cf8 \
\pard\pardeftab720\sl340\sa300\partightenfactor0

\f0\fs30 \cf2 \cb3 or\
\pard\pardeftab720\sl300\partightenfactor0

\f1\fs26 \cf6 \cb4 from\cf5  mypackage.mymodule \cf6 import\cf5  myclass\cf8 \
\
String is a sequence of letters , numbers, characters surrounded by single , double quotes\
\
my_string = \'93this is my first string\'94\
my_string can be worked in similar to lists\
\
my_string[0],my_string[2]\'85.etc\
\
Slicing my_string[:10] #starting from start and end unto but not including character at 10th index\
my_string[::-1] #string reverse\
\
my_string.index(\'93i\'94) #shows index of first occurrence of letter i\
my_string.count(\'93I\'94) #shows count of i\'92s present in the string\
my_string.index(\'93fir\'94) #start index of phrase fir\
\
Dictionaries\
\
Unordered list of key value pairs\
dict = \{\}\
dict = \{\'91abc\'92:\'92123\'92,\'92bcd\'92:\'92345\'92\}\
del dict\{\'91abc\'92\}\
\'93abc\'94 in dict #will result true\
\'93abd\'94 not in dict #will result true\
dict.keys() #Prints all the keys in the same order\
dict.values() #Prints values in the same order\
dict.items() #Prints list of tuples of key, value pairs in the same order\
\
\
\pard\pardeftab720\sl340\partightenfactor0

\f2\fs30 \cf9 \cb3 range() returns \'96 the\'a0
\b list
\b0 \'a0as return type.\
xrange() returns \'96\'a0
\b xrange()
\b0 \'a0object.\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl500\qj\partightenfactor0
\ls1\ilvl0\cf9 \kerning1\expnd0\expndtw0 {\listtext	
\f3 \uc0\u9642 
\f2 	}\expnd0\expndtw0\kerning0
Return Type\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f3 \uc0\u9642 
\f2 	}\expnd0\expndtw0\kerning0
Memory(range()>xrange())\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f3 \uc0\u9642 
\f2 	}\expnd0\expndtw0\kerning0
Operation Usage(as range returns list and xrange returns xrange object, xrange is not iterable)\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	
\f3 \uc0\u9642 
\f2 	}\expnd0\expndtw0\kerning0
Speed (xrange()>range())\
\pard\tx720\pardeftab720\sl500\qj\partightenfactor0
\cf9 \cb1 \
\pard\pardeftab720\sl500\sa200\qj\partightenfactor0

\b \cf9 \cb3 Examples of inbuilt iterator types.\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth14380\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl286\partightenfactor0

\f4\b0\fs26 \cf10 # Sample built-in iterators\cf9 \
\'a0\
\cf10 # Iterating over a list\cf9 \
\cf11 print\cf9 (\cf12 "List Iteration"\cf9 )\
l 
\f5\b \cf13 =
\f4\b0 \cf9  [\cf12 "geeks"\cf9 , \cf12 "for"\cf9 , \cf12 "geeks"\cf9 ]\

\f5\b \cf13 for
\f4\b0 \cf9  i 
\f5\b \cf13 in
\f4\b0 \cf9  l:\
\'a0\'a0\'a0\'a0\cf11 print\cf9 (i)\
\'a0\'a0\'a0\'a0\'a0\
\cf10 # Iterating over a tuple (immutable)\cf9 \
\cf11 print\cf9 (\cf12 "\\nTuple Iteration"\cf9 )\
t 
\f5\b \cf13 =
\f4\b0 \cf9  (\cf12 "geeks"\cf9 , \cf12 "for"\cf9 , \cf12 "geeks"\cf9 )\

\f5\b \cf13 for
\f4\b0 \cf9  i 
\f5\b \cf13 in
\f4\b0 \cf9  t:\
\'a0\'a0\'a0\'a0\cf11 print\cf9 (i)\
\'a0\'a0\'a0\'a0\'a0\
\cf10 # Iterating over a String\cf9 \
\cf11 print\cf9 (\cf12 "\\nString Iteration"\cf9 )\'a0\'a0\'a0 \
s 
\f5\b \cf13 =
\f4\b0 \cf9  \cf12 "Geeks"\cf9 \

\f5\b \cf13 for
\f4\b0 \cf9  i 
\f5\b \cf13 in
\f4\b0 \cf9  s :\
\'a0\'a0\'a0\'a0\cf11 print\cf9 (i)\
\'a0\'a0\'a0\'a0\'a0\
\cf10 # Iterating over dictionary\cf9 \
\cf11 print\cf9 (\cf12 "\\nDictionary Iteration"\cf9 )\'a0\'a0 \
d 
\f5\b \cf13 =
\f4\b0 \cf9  \cf11 dict\cf9 () \
d[\cf12 'xyz'\cf9 ] 
\f5\b \cf13 =
\f4\b0 \cf9  \cf14 123\cf9 \
d[\cf12 'abc'\cf9 ] 
\f5\b \cf13 =
\f4\b0 \cf9  \cf14 345\cf9 \

\f5\b \cf13 for
\f4\b0 \cf9  i 
\f5\b \cf13 in
\f4\b0 \cf9  d :\
\'a0\'a0\'a0\'a0\cf11 print\cf9 (\cf12 "%s\'a0 %d"\cf9  
\f5\b \cf13 %
\f4\b0 \cf9 (i, d[i]))\cell \lastrow\row
\pard\tx720\pardeftab720\sl500\qj\partightenfactor0

\f2\fs30 \cf9 \cb1 \
\pard\pardeftab720\sl660\sa100\qj\partightenfactor0

\fs56 \cf9 \cb3 When to use yield instead of return in Python?\cb1 \
\pard\pardeftab720\sl500\sa200\qj\partightenfactor0

\fs30 \cf9 \cb3 The yield statement suspends function\'92s execution and sends a value back to caller, but retains enough state to enable function to resume where it is left off. When resumed, the function continues execution immediately after the last yield run. This allows its code to produce a series of values over time, rather them computing them at once and sending them back like a list.\cb1 \
\pard\pardeftab720\sl340\partightenfactor0

\b \cf9 \cb3 Return
\b0 \'a0sends a specified value back to its caller whereas\'a0
\b Yield
\b0 \'a0can produce a sequence of values.\
\pard\pardeftab720\sl340\partightenfactor0
\cf9 \cb1 \
\pard\pardeftab720\sl500\sa200\qj\partightenfactor0
\cf9 \cb3 Yield are used in Python\'a0
\b generators
\b0 . A generator function is defined like a normal function, but whenever it needs to generate a value, it does so with the yield keyword rather than return. If the body of a def contains yield, the function automatically becomes a generator function.\
\pard\pardeftab720\sl300\qj\partightenfactor0

\b \cf9 \
try except blocks\

\b0\fs26 \
\pard\pardeftab720\sl340\partightenfactor0

\f1 \cf8 \cb4 try:\
	div = i/0\
\
except:	\
	print \'93exception occurred\'94\
\
try:\
	div = i/0\
\
except ZeroDivisionError:	\
	print \'93ZeroDivisionError occurred\'94\
Except NameError:\
	print \'93NameError occurred\'94\
\
\
\pard\pardeftab720\sl300\partightenfactor0
\cf8 Object oriented programming is based on classes , methods and objects.\
\
Class is a datatype contains its own variables, attributes and function which in OOPS is termed as methods\
\
Or BLUE PRINT FOR CREATING OBJECTS\
\
Object as an instance of a defined class and the attributes values for a particular object defines the objects state\
\
class My_router(object):\
	\'91\'92\'92 description\'92\'92\'92 #classes functionality is described\
     def __init__(self,router_name,model,ios):  #first function that gets executed when object is defined, init is initialization of variables. Self is current instance of the class\
     	self.routername=routername\
         self.model=model\
         self.ios=ios\
     def print_router(self,manu_date):\
		print \'93the router name and date\'94, self.routername + self.manu_date\
\
regular expressions\
\
import re\
\
re.match\
\
\
\
\
\
threading \
\
Thread and threading modules\'85.\
\
\
\
\
\
\
\
         \
\
}